"""
This type stub file was generated by pyright.
"""

from collections.abc import Iterable
from pip._vendor.packaging.tags import Tag
from pip._vendor.packaging.utils import InvalidWheelFilename as _PackagingInvalidWheelFilename, parse_wheel_filename
from pip._internal.exceptions import InvalidWheelFilename

"""Represents a wheel file and provides access to the various parts of the
name that have meaning.
"""
class Wheel:
    """A wheel file"""
    def __init__(self, filename: str) -> None:
        ...
    
    def get_formatted_file_tags(self) -> list[str]:
        """Return the wheel's tags as a sorted list of strings."""
        ...
    
    def support_index_min(self, tags: list[Tag]) -> int:
        """Return the lowest index that one of the wheel's file_tag combinations
        achieves in the given list of supported tags.

        For example, if there are 8 supported tags and one of the file tags
        is first in the list, then return 0.

        :param tags: the PEP 425 tags to check the wheel against, in order
            with most preferred first.

        :raises ValueError: If none of the wheel's file tags match one of
            the supported tags.
        """
        ...
    
    def find_most_preferred_tag(self, tags: list[Tag], tag_to_priority: dict[Tag, int]) -> int:
        """Return the priority of the most preferred tag that one of the wheel's file
        tag combinations achieves in the given list of supported tags using the given
        tag_to_priority mapping, where lower priorities are more-preferred.

        This is used in place of support_index_min in some cases in order to avoid
        an expensive linear scan of a large list of tags.

        :param tags: the PEP 425 tags to check the wheel against.
        :param tag_to_priority: a mapping from tag to priority of that tag, where
            lower is more preferred.

        :raises ValueError: If none of the wheel's file tags match one of
            the supported tags.
        """
        ...
    
    def supported(self, tags: Iterable[Tag]) -> bool:
        """Return whether the wheel is compatible with one of the given tags.

        :param tags: the PEP 425 tags to check the wheel against.
        """
        ...
    


