"""
This type stub file was generated by pyright.
"""

import logging
import os
import shutil
import subprocess
import sysconfig
import typing
import urllib.parse
from abc import ABC, abstractmethod
from functools import cache
from os.path import commonprefix
from pathlib import Path
from typing import Any, NamedTuple
from pip._vendor.requests.auth import AuthBase, HTTPBasicAuth
from pip._vendor.requests.models import Request, Response
from pip._vendor.requests.utils import get_netrc_auth
from pip._internal.utils.logging import getLogger
from pip._internal.utils.misc import ask, ask_input, ask_password, remove_auth_from_url, split_auth_netloc_from_url
from pip._internal.vcs.versioncontrol import AuthInfo

"""Network Authentication Helpers

Contains interface (MultiDomainBasicAuth) and associated glue code for
providing credentials in the context of network requests.
"""
logger = ...
KEYRING_DISABLED = ...
class Credentials(NamedTuple):
    url: str
    username: str
    password: str
    ...


class KeyRingBaseProvider(ABC):
    """Keyring base provider interface"""
    has_keyring: bool
    @abstractmethod
    def get_auth_info(self, url: str, username: str | None) -> AuthInfo | None:
        ...
    
    @abstractmethod
    def save_auth_info(self, url: str, username: str, password: str) -> None:
        ...
    


class KeyRingNullProvider(KeyRingBaseProvider):
    """Keyring null provider"""
    has_keyring = ...
    def get_auth_info(self, url: str, username: str | None) -> AuthInfo | None:
        ...
    
    def save_auth_info(self, url: str, username: str, password: str) -> None:
        ...
    


class KeyRingPythonProvider(KeyRingBaseProvider):
    """Keyring interface which uses locally imported `keyring`"""
    has_keyring = ...
    def __init__(self) -> None:
        ...
    
    def get_auth_info(self, url: str, username: str | None) -> AuthInfo | None:
        ...
    
    def save_auth_info(self, url: str, username: str, password: str) -> None:
        ...
    


class KeyRingCliProvider(KeyRingBaseProvider):
    """Provider which uses `keyring` cli

    Instead of calling the keyring package installed alongside pip
    we call keyring on the command line which will enable pip to
    use which ever installation of keyring is available first in
    PATH.
    """
    has_keyring = ...
    def __init__(self, cmd: str) -> None:
        ...
    
    def get_auth_info(self, url: str, username: str | None) -> AuthInfo | None:
        ...
    
    def save_auth_info(self, url: str, username: str, password: str) -> None:
        ...
    


@cache
def get_keyring_provider(provider: str) -> KeyRingBaseProvider:
    ...

class MultiDomainBasicAuth(AuthBase):
    def __init__(self, prompting: bool = ..., index_urls: list[str] | None = ..., keyring_provider: str = ...) -> None:
        ...
    
    @property
    def keyring_provider(self) -> KeyRingBaseProvider:
        ...
    
    @keyring_provider.setter
    def keyring_provider(self, provider: str) -> None:
        ...
    
    @property
    def use_keyring(self) -> bool:
        ...
    
    def __call__(self, req: Request) -> Request:
        ...
    
    def handle_401(self, resp: Response, **kwargs: Any) -> Response:
        ...
    
    def warn_on_401(self, resp: Response, **kwargs: Any) -> None:
        """Response callback to warn about incorrect credentials."""
        ...
    
    def save_credentials(self, resp: Response, **kwargs: Any) -> None:
        """Response callback to save credentials on success."""
        ...
    


