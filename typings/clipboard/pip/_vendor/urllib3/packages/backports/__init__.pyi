"""
This type stub file was generated by pyright.
"""

import itertools
import sys
from weakref import ref

"""
backports.weakref_finalize
~~~~~~~~~~~~~~~~~~

Backports the Python 3 ``weakref.finalize`` method.
"""
__all__ = ["weakref_finalize"]
class weakref_finalize:
    """Class for finalization of weakrefable objects
    finalize(obj, func, *args, **kwargs) returns a callable finalizer
    object which will be called when obj is garbage collected. The
    first time the finalizer is called it evaluates func(*arg, **kwargs)
    and returns the result. After this the finalizer is dead, and
    calling it just returns None.
    When the program exits any remaining finalizers for which the
    atexit attribute is true will be run in reverse order of creation.
    By default atexit is true.
    """
    __slots__ = ...
    _registry = ...
    _shutdown = ...
    _index_iter = ...
    _dirty = ...
    _registered_with_atexit = ...
    class _Info:
        __slots__ = ...
    
    
    def __init__(self, obj, func, *args, **kwargs) -> None:
        ...
    
    def __call__(self, _=...): # -> None:
        """If alive then mark as dead and return func(*args, **kwargs);
        otherwise return None"""
        ...
    
    def detach(self): # -> tuple[Any, Any, Any, Any | dict[Any, Any]] | None:
        """If alive then mark as dead and return (obj, func, args, kwargs);
        otherwise return None"""
        ...
    
    def peek(self): # -> tuple[Any, Any, Any, Any | dict[Any, Any]] | None:
        """If alive then return (obj, func, args, kwargs);
        otherwise return None"""
        ...
    
    @property
    def alive(self): # -> bool:
        """Whether finalizer is alive"""
        ...
    
    @property
    def atexit(self): # -> Literal[False]:
        """Whether finalizer should be called at exit"""
        ...
    
    @atexit.setter
    def atexit(self, value): # -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


