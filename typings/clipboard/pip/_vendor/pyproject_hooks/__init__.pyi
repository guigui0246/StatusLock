"""
This type stub file was generated by pyright.
"""

import json
import os
import sys
import tempfile
from contextlib import contextmanager
from os.path import abspath, join as pjoin
from subprocess import STDOUT, check_call, check_output
from typing import Any, Iterator, Mapping, Optional, Protocol, Sequence, TYPE_CHECKING
from ._in_process import _in_proc_script_path

if TYPE_CHECKING:
    class SubprocessRunner(Protocol):
        """A protocol for the subprocess runner."""
        def __call__(self, cmd: Sequence[str], cwd: Optional[str] = ..., extra_environ: Optional[Mapping[str, str]] = ...) -> None:
            ...
        
    
    
def write_json(obj: Mapping[str, Any], path: str, **kwargs) -> None:
    ...

def read_json(path: str) -> Mapping[str, Any]:
    ...

class BackendUnavailable(Exception):
    """Will be raised if the backend cannot be imported in the hook process."""
    def __init__(self, traceback: str, message: Optional[str] = ..., backend_name: Optional[str] = ..., backend_path: Optional[Sequence[str]] = ...) -> None:
        ...
    


class HookMissing(Exception):
    """Will be raised on missing hooks (if a fallback can't be used)."""
    def __init__(self, hook_name: str) -> None:
        ...
    


class UnsupportedOperation(Exception):
    """May be raised by build_sdist if the backend indicates that it can't."""
    def __init__(self, traceback: str) -> None:
        ...
    


def default_subprocess_runner(cmd: Sequence[str], cwd: Optional[str] = ..., extra_environ: Optional[Mapping[str, str]] = ...) -> None:
    """The default method of calling the wrapper subprocess.

    This uses :func:`subprocess.check_call` under the hood.
    """
    ...

def quiet_subprocess_runner(cmd: Sequence[str], cwd: Optional[str] = ..., extra_environ: Optional[Mapping[str, str]] = ...) -> None:
    """Call the subprocess while suppressing output.

    This uses :func:`subprocess.check_output` under the hood.
    """
    ...

def norm_and_check(source_tree: str, requested: str) -> str:
    """Normalise and check a backend path.

    Ensure that the requested backend path is specified as a relative path,
    and resolves to a location under the given source tree.

    Return an absolute version of the requested path.
    """
    ...

class BuildBackendHookCaller:
    """A wrapper to call the build backend hooks for a source directory."""
    def __init__(self, source_dir: str, build_backend: str, backend_path: Optional[Sequence[str]] = ..., runner: Optional[SubprocessRunner] = ..., python_executable: Optional[str] = ...) -> None:
        """
        :param source_dir: The source directory to invoke the build backend for
        :param build_backend: The build backend spec
        :param backend_path: Additional path entries for the build backend spec
        :param runner: The :ref:`subprocess runner <Subprocess Runners>` to use
        :param python_executable:
            The Python executable used to invoke the build backend
        """
        ...
    
    @contextmanager
    def subprocess_runner(self, runner: SubprocessRunner) -> Iterator[None]:
        """A context manager for temporarily overriding the default
        :ref:`subprocess runner <Subprocess Runners>`.

        :param runner: The new subprocess runner to use within the context.

        .. code-block:: python

            hook_caller = BuildBackendHookCaller(...)
            with hook_caller.subprocess_runner(quiet_subprocess_runner):
                ...
        """
        ...
    
    def get_requires_for_build_wheel(self, config_settings: Optional[Mapping[str, Any]] = ...) -> Sequence[str]:
        """Get additional dependencies required for building a wheel.

        :param config_settings: The configuration settings for the build backend
        :returns: A list of :pep:`dependency specifiers <508>`.

        .. admonition:: Fallback

            If the build backend does not defined a hook with this name, an
            empty list will be returned.
        """
        ...
    
    def prepare_metadata_for_build_wheel(self, metadata_directory: str, config_settings: Optional[Mapping[str, Any]] = ..., _allow_fallback: bool = ...) -> str:
        """Prepare a ``*.dist-info`` folder with metadata for this project.

        :param metadata_directory: The directory to write the metadata to
        :param config_settings: The configuration settings for the build backend
        :param _allow_fallback:
            Whether to allow the fallback to building a wheel and extracting
            the metadata from it. Should be passed as a keyword argument only.

        :returns: Name of the newly created subfolder within
                  ``metadata_directory``, containing the metadata.

        .. admonition:: Fallback

            If the build backend does not define a hook with this name and
            ``_allow_fallback`` is truthy, the backend will be asked to build a
            wheel via the ``build_wheel`` hook and the dist-info extracted from
            that will be returned.
        """
        ...
    
    def build_wheel(self, wheel_directory: str, config_settings: Optional[Mapping[str, Any]] = ..., metadata_directory: Optional[str] = ...) -> str:
        """Build a wheel from this project.

        :param wheel_directory: The directory to write the wheel to
        :param config_settings: The configuration settings for the build backend
        :param metadata_directory: The directory to reuse existing metadata from
        :returns:
            The name of the newly created wheel within ``wheel_directory``.

        .. admonition:: Interaction with fallback

            If the ``build_wheel`` hook was called in the fallback for
            :meth:`prepare_metadata_for_build_wheel`, the build backend would
            not be invoked. Instead, the previously built wheel will be copied
            to ``wheel_directory`` and the name of that file will be returned.
        """
        ...
    
    def get_requires_for_build_editable(self, config_settings: Optional[Mapping[str, Any]] = ...) -> Sequence[str]:
        """Get additional dependencies required for building an editable wheel.

        :param config_settings: The configuration settings for the build backend
        :returns: A list of :pep:`dependency specifiers <508>`.

        .. admonition:: Fallback

            If the build backend does not defined a hook with this name, an
            empty list will be returned.
        """
        ...
    
    def prepare_metadata_for_build_editable(self, metadata_directory: str, config_settings: Optional[Mapping[str, Any]] = ..., _allow_fallback: bool = ...) -> Optional[str]:
        """Prepare a ``*.dist-info`` folder with metadata for this project.

        :param metadata_directory: The directory to write the metadata to
        :param config_settings: The configuration settings for the build backend
        :param _allow_fallback:
            Whether to allow the fallback to building a wheel and extracting
            the metadata from it. Should be passed as a keyword argument only.
        :returns: Name of the newly created subfolder within
                  ``metadata_directory``, containing the metadata.

        .. admonition:: Fallback

            If the build backend does not define a hook with this name and
            ``_allow_fallback`` is truthy, the backend will be asked to build a
            wheel via the ``build_editable`` hook and the dist-info
            extracted from that will be returned.
        """
        ...
    
    def build_editable(self, wheel_directory: str, config_settings: Optional[Mapping[str, Any]] = ..., metadata_directory: Optional[str] = ...) -> str:
        """Build an editable wheel from this project.

        :param wheel_directory: The directory to write the wheel to
        :param config_settings: The configuration settings for the build backend
        :param metadata_directory: The directory to reuse existing metadata from
        :returns:
            The name of the newly created wheel within ``wheel_directory``.

        .. admonition:: Interaction with fallback

            If the ``build_editable`` hook was called in the fallback for
            :meth:`prepare_metadata_for_build_editable`, the build backend
            would not be invoked. Instead, the previously built wheel will be
            copied to ``wheel_directory`` and the name of that file will be
            returned.
        """
        ...
    
    def get_requires_for_build_sdist(self, config_settings: Optional[Mapping[str, Any]] = ...) -> Sequence[str]:
        """Get additional dependencies required for building an sdist.

        :returns: A list of :pep:`dependency specifiers <508>`.
        """
        ...
    
    def build_sdist(self, sdist_directory: str, config_settings: Optional[Mapping[str, Any]] = ...) -> str:
        """Build an sdist from this project.

        :returns:
            The name of the newly created sdist within ``wheel_directory``.
        """
        ...
    


