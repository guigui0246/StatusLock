"""
This type stub file was generated by pyright.
"""

import math
import time
from functools import lru_cache
from time import monotonic
from typing import Iterable, List, Optional
from .color import Color, blend_rgb
from .color_triplet import ColorTriplet
from .console import Console, ConsoleOptions, RenderResult
from .jupyter import JupyterMixin
from .measure import Measurement
from .segment import Segment
from .style import Style, StyleType

PULSE_SIZE = ...
class ProgressBar(JupyterMixin):
    """Renders a (progress) bar. Used by rich.progress.

    Args:
        total (float, optional): Number of steps in the bar. Defaults to 100. Set to None to render a pulsing animation.
        completed (float, optional): Number of steps completed. Defaults to 0.
        width (int, optional): Width of the bar, or ``None`` for maximum width. Defaults to None.
        pulse (bool, optional): Enable pulse effect. Defaults to False. Will pulse if a None total was passed.
        style (StyleType, optional): Style for the bar background. Defaults to "bar.back".
        complete_style (StyleType, optional): Style for the completed bar. Defaults to "bar.complete".
        finished_style (StyleType, optional): Style for a finished bar. Defaults to "bar.finished".
        pulse_style (StyleType, optional): Style for pulsing bars. Defaults to "bar.pulse".
        animation_time (Optional[float], optional): Time in seconds to use for animation, or None to use system time.
    """
    def __init__(self, total: Optional[float] = ..., completed: float = ..., width: Optional[int] = ..., pulse: bool = ..., style: StyleType = ..., complete_style: StyleType = ..., finished_style: StyleType = ..., pulse_style: StyleType = ..., animation_time: Optional[float] = ...) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    @property
    def percentage_completed(self) -> Optional[float]:
        """Calculate percentage complete."""
        ...
    
    def update(self, completed: float, total: Optional[float] = ...) -> None:
        """Update progress with new values.

        Args:
            completed (float): Number of steps completed.
            total (float, optional): Total number of steps, or ``None`` to not change. Defaults to None.
        """
        ...
    
    def __rich_console__(self, console: Console, options: ConsoleOptions) -> RenderResult:
        ...
    
    def __rich_measure__(self, console: Console, options: ConsoleOptions) -> Measurement:
        ...
    


if __name__ == "__main__":
    console = ...
    bar = ...
