"""
This type stub file was generated by pyright.
"""

import asyncio
import enum
import sys
import warnings
from types import TracebackType
from typing import Optional, Type, final

if sys.version_info >= (3, 11):
    ...
else:
    ...
if sys.version_info >= (3, 11):
    ...
else:
    ...
__version__ = ...
__all__ = ("timeout", "timeout_at", "Timeout")
def timeout(delay: Optional[float]) -> Timeout:
    """timeout context manager.

    Useful in cases when you want to apply timeout logic around block
    of code or in cases when asyncio.wait_for is not suitable. For example:

    >>> async with timeout(0.001):
    ...     async with aiohttp.get('https://github.com') as r:
    ...         await r.text()


    delay - value in seconds or None to disable timeout logic
    """
    ...

def timeout_at(deadline: Optional[float]) -> Timeout:
    """Schedule the timeout at absolute time.

    deadline argument points on the time in the same clock system
    as loop.time().

    Please note: it is not POSIX time but a time with
    undefined starting base, e.g. the time of the system power on.

    >>> async with timeout_at(loop.time() + 10):
    ...     async with aiohttp.get('https://github.com') as r:
    ...         await r.text()


    """
    ...

class _State(enum.Enum):
    INIT = ...
    ENTER = ...
    TIMEOUT = ...
    EXIT = ...


@final
class Timeout:
    __slots__ = ...
    def __init__(self, deadline: Optional[float], loop: asyncio.AbstractEventLoop) -> None:
        ...
    
    def __enter__(self) -> Timeout:
        ...
    
    def __exit__(self, exc_type: Optional[Type[BaseException]], exc_val: Optional[BaseException], exc_tb: Optional[TracebackType]) -> Optional[bool]:
        ...
    
    async def __aenter__(self) -> Timeout:
        ...
    
    async def __aexit__(self, exc_type: Optional[Type[BaseException]], exc_val: Optional[BaseException], exc_tb: Optional[TracebackType]) -> Optional[bool]:
        ...
    
    @property
    def expired(self) -> bool:
        """Is timeout expired during execution?"""
        ...
    
    @property
    def deadline(self) -> Optional[float]:
        ...
    
    def reject(self) -> None:
        """Reject scheduled timeout if any."""
        ...
    
    def shift(self, delay: float) -> None:
        """Advance timeout on delay seconds.

        The delay can be negative.

        Raise RuntimeError if shift is called when deadline is not scheduled
        """
        ...
    
    def update(self, deadline: float) -> None:
        """Set deadline to absolute value.

        deadline argument points on the time in the same clock system
        as loop.time().

        If new deadline is in the past the timeout is raised immediately.

        Please note: it is not POSIX time but a time with
        undefined starting base, e.g. the time of the system power on.
        """
        ...
    


