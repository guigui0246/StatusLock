"""
This type stub file was generated by pyright.
"""

import dataclasses
import urllib.parse
import urllib.request
from .exceptions import InvalidProxy, InvalidURI

__all__ = ["parse_uri", "WebSocketURI"]
DELIMS = ...
@dataclasses.dataclass
class WebSocketURI:
    """
    WebSocket URI.

    Attributes:
        secure: :obj:`True` for a ``wss`` URI, :obj:`False` for a ``ws`` URI.
        host: Normalized to lower case.
        port: Always set even if it's the default.
        path: May be empty.
        query: May be empty if the URI doesn't include a query component.
        username: Available when the URI contains `User Information`_.
        password: Available when the URI contains `User Information`_.

    .. _User Information: https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.1

    """
    secure: bool
    host: str
    port: int
    path: str
    query: str
    username: str | None = ...
    password: str | None = ...
    @property
    def resource_name(self) -> str:
        ...
    
    @property
    def user_info(self) -> tuple[str, str] | None:
        ...
    


def parse_uri(uri: str) -> WebSocketURI:
    """
    Parse and validate a WebSocket URI.

    Args:
        uri: WebSocket URI.

    Returns:
        Parsed WebSocket URI.

    Raises:
        InvalidURI: If ``uri`` isn't a valid WebSocket URI.

    """
    ...

@dataclasses.dataclass
class Proxy:
    """
    Proxy.

    Attributes:
        scheme: ``"socks5h"``, ``"socks5"``, ``"socks4a"``, ``"socks4"``,
            ``"https"``, or ``"http"``.
        host: Normalized to lower case.
        port: Always set even if it's the default.
        username: Available when the proxy address contains `User Information`_.
        password: Available when the proxy address contains `User Information`_.

    .. _User Information: https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.1

    """
    scheme: str
    host: str
    port: int
    username: str | None = ...
    password: str | None = ...
    @property
    def user_info(self) -> tuple[str, str] | None:
        ...
    


def parse_proxy(proxy: str) -> Proxy:
    """
    Parse and validate a proxy.

    Args:
        proxy: proxy.

    Returns:
        Parsed proxy.

    Raises:
        InvalidProxy: If ``proxy`` isn't a valid proxy.

    """
    ...

def get_proxy(uri: WebSocketURI) -> str | None:
    """
    Return the proxy to use for connecting to the given WebSocket URI, if any.

    """
    ...

